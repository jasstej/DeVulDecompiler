version: '3.8'


x-decompiler:
    &default-decompiler-options
        init: true
        environment:
            - SERVER=${EXPLORER_URL:-http://explorer:8000}
            - DEBUG=${DEBUG:-0}
        networks:
            - backend_net
        command: [
            "--timeout", "${DECOMPILER_TIMEOUT:-120}",
            "--extended-timeout", "${DECOMPILER_EXTENDED_TIMEOUT:-900}",
            "--mem-limit-hard", "${DECOMPILER_MEM_LIMIT_HARD:-10000000000}",
            "--mem-limit-soft", "${DECOMPILER_MEM_LIMIT_SOFT:-10000000000}"
            ]
        secrets:
            - worker_auth_token
        deploy:
            replicas: 1


services:
    traefik:
        image: traefik:v2.6
        init: true
        networks:
            - backend_net
            - default
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        ports:
            - target: 80
              published: 80
              mode: host
              protocol: tcp
            - target: 443
              published: 443
              mode: host
              protocol: tcp
            - "8080:8080"
        command:
            - --providers.docker=true
            - --providers.docker.exposedbydefault=false
            - --providers.docker.swarmMode=true
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
            - --entrypoints.web.http.redirections.entryPoint.to=websecure
            - --entrypoints.web.http.redirections.entryPoint.scheme=https
            - --entrypoints.web.http.redirections.entrypoint.permanent=true
            - --accesslog
            - --log
            - --api
            - --api.insecure=true
            - --api.dashboard=true
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role==manager"
            labels:
                - traefik.enable=true
                - traefik.http.services.traefik.loadbalancer.server.port=8080
                - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
                - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
                - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=${MAX_REQUEST_SIZE:-2000000}
                - traefik.http.middlewares.limit.buffering.memRequestBodyBytes=2000000

    database:
        image: postgres:14
        environment:
            - POSTGRES_PASSWORD_FILE=/run/secrets/db_superuser_pass
            - PGDATA=/var/lib/postgresql/data/pgdata
        secrets:
            - db_superuser_pass
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
        volumes:
            - ./db_data:/var/lib/postgresql/data/
        networks:
            - backend_net
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role==manager"

    memcached:
        image: memcached:1.6
        networks:
            - backend_net
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role==manager"

    explorer:
        depends_on:
            - database
            - memcached
        init: true
        build: .
        image: ${IMAGE_NAME:-decompiler_explorer}:explorer
        environment:
            - PYTHONUNBUFFERED=1
            - DJANGO_SETTINGS_MODULE=decompiler_explorer.settings.docker
            - DEBUG=${DEBUG:-0}
        networks:
            - backend_net
        secrets:
            - db_superuser_pass
            - worker_auth_token
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000"]
        deploy:
            replicas: 1
            placement:
                constraints:
                    - "node.role==manager"
            labels:
                - traefik.enable=true
                - traefik.http.services.explorer.loadbalancer.server.port=8000
                - traefik.http.routers.explorer.rule=Host(`${DOMAIN:-dce.localhost}`)
                - traefik.http.routers.explorer.entrypoints=websecure
                - traefik.http.routers.explorer.tls=true
                - traefik.http.routers.explorer.middlewares=limit@docker


    # Decompilers
    binja:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:binja
        build:
            context: runners/decompiler
            target: binja

    ghidra:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:ghidra
        build:
            context: runners/decompiler
            target: ghidra

    angr:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:angr
        build:
            context: runners/decompiler
            target: angr
        command: [
            "--timeout", "${DECOMPILER_TIMEOUT_ANGR:-300}",
            "--extended-timeout", "${DECOMPILER_EXTENDED_TIMEOUT_ANGR:-1200}",
            "--mem-limit-hard", "${DECOMPILER_MEM_LIMIT_HARD:-10000000000}",
            "--mem-limit-soft", "${DECOMPILER_MEM_LIMIT_SOFT:-10000000000}"
        ]

    snowman:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:snowman
        build:
            context: runners/decompiler
            target: snowman

    retdec:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:retdec
        build:
            context: runners/decompiler
            target: retdec
        command: [
            "--timeout", "${DECOMPILER_TIMEOUT:-120}",
            "--extended-timeout", "${DECOMPILER_EXTENDED_TIMEOUT:-900}",
            # Do not specify hard limit #12
            "--mem-limit-soft", "${DECOMPILER_MEM_LIMIT_SOFT:-10000000000}"
            ]

    recstudio:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:recstudio
        build:
            context: runners/decompiler
            target: recstudio

    boomerang:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:boomerang
        build:
            context: runners/decompiler
            target: boomerang

    reko:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:reko
        build:
            context: runners/decompiler
            target: reko

    hexrays:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:hexrays
        build:
            context: runners/decompiler
            target: hexrays

    dewolf:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:dewolf
        build:
            context: runners/decompiler
            target: dewolf

    relyze:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:relyze
        build:
            context: runners/decompiler
            target: relyze

    revng:
        <<: *default-decompiler-options
        image: ${IMAGE_NAME:-decompiler_explorer}:revng
        build:
            context: runners/decompiler
            target: revng

networks:
    backend_net:

volumes:
    staticfiles:
    mediafiles:

secrets:
    db_superuser_pass:
        file: ./secrets/db_superuser_pass
    worker_auth_token:
        file: ./secrets/worker_auth_token
